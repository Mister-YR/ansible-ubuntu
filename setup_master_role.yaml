---
- hosts: all
  become: true
  ignore_errors: true
  
  tasks:
#~~~~~~~~~~~~~~~~~~~~~~~~~~~ replase docker native.cgroupdriver  ~~~~~~~
   - name: replase docker native.cgroupdriver
     replace:
       path: /usr/lib/systemd/system/docker.service
       regexp: 'ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock'
       replace: 'ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock --exec-opt native.cgroupdriver=systemd'
       backup: yes
       
#~~~~~~~~~~~~~~~~~~~~~~~~~~~ restart docker services  ~~~~~~~~~~~~~~~~~~
   - name: restart docker services
     ansible.builtin.service:
       name: daemon-reload
       state: reloaded

   - name: restart docker services
     ansible.builtin.service:
       name: docker
       state: reloaded
      
#~~~~~~~~~~~~~~~~~~~~~~~~~~~ Create the actual cluster ~~~~~~~~~~~~~~~~~~
   - name: Create the actual cluster 
     sudo: true
     sudo_user: "{{ sudo-user }}"
     shell: kubeadm init --pod-network-cidr="{{ net-addr }}"

#~~~~~~~~~~~~~~~~~~~~~~~~~~~ folder & file dependency  ~~~~~~~~~~~~~~~~~~
   - name: folder & file dependency
     sudo: true
     sudo_user: "{{ sudo-user }}"
     shell: | 
        mkdir -p $HOME/.kube
        sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
        sudo chown $(id -u):$(id -g) $HOME/.kube/config

#~~~~~~~~~~~~~~~~~~~~~~~~~~~ Install the Calico network plugin  ~~~~~~~~
   - name: Install the Calico network plugin
     sudo: true
     sudo_user: "{{ sudo-user }}"
     shell: kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml

#~~~~~~~~~~~~~~~~~~~~~~~~~~~ taint nodes *MASTER* ~~~~~~~~~~~~~~~~~~~~~~
   - name: taint nodes *MASTER*
     sudo: true
     sudo_user: "{{ sudo-user }}"
     shell: kubectl taint nodes --all node-role.kubernetes.io/master-

#~~~~~~~~~~~~~~~~~~~~~~~~~~~ create & print join token ~~~~~~~~~~~~~~~~~
   - name: create & print join token
     sudo_user: "{{ sudo-user }}"
     shell: kubeadm token create --print-join-command
     register: command_output

   - debug: 
      var: command_output.stdout_lines
